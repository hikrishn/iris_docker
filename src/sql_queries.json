{
  "SQL_ENT_GET_ENTERPRISE_SUMMARY_PARENT" : "(SELECT 'bad', count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, 'moderate', AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, 'good', AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account,  entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entcdr.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) and  entcdr.account = entaccnts.account AND entcdr.call_timestamp BETWEEN %s AND %s and entcdr.duration > 0)",
  "SQL_ENT_GET_ENTERPRISE_SUMMARY" : "(SELECT 'bad', count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', entcdr.direction, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', entcdr.direction, null)) AS outbound, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, 'moderate', AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, 'good', AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account, entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entcdr.account = %s and entcdr.account = entaccnts.account AND entcdr.call_timestamp BETWEEN %s AND %s and entcdr.duration > 0)",
  "SQL_ENT_CHECK_ACCOUNT_AUTH" : "SELECT parent_account FROM ent_accounts WHERE account = %s",
  "SQL_GET_TOP_N_PROBLEM_CDRS" : "SELECT from_number, to_number, direction, duration, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter, device FROM ent_cdrs WHERE account = %s AND call_timestamp BETWEEN %s AND %s and duration > 0 ORDER BY mos_score ASC LIMIT %s",
  "SQL_GET_TOP_N_LOCATION_CDRS" : "SELECT ( select count(0) FROM ent_cdrs WHERE account = %s AND call_timestamp BETWEEN %s AND %s and duration > 0) as totalCount, from_number, to_number, direction, duration, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter, device FROM ent_cdrs WHERE account = %s AND call_timestamp BETWEEN %s AND %s and duration > 0 ORDER BY call_timestamp DESC LIMIT %s OFFSET %s",
  "SQL_GET_TOP_N_LOCATION_DID_CDRS" : "SELECT ( select count(0) FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s and duration > 0) as totalCount, from_number, to_number, direction, duration, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter, device FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s and duration > 0 ORDER BY call_timestamp DESC LIMIT %s OFFSET %s",
  "SQL_GET_ACCOUNTS" : "SELECT account,  account_name, IF(account = %s, 'Y', 'N') AS is_self, IF(parent_account = %s, 'Y', 'N') AS is_parent FROM ent_accounts WHERE %s IN (account, parent_account)",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT": "select t.* from (SELECT AVG(IF(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0, entcdr.mos_score, NULL)) AS mos_score, COUNT(IF(entcdr.mos_score IS NULL, 1, 1)) AS totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account, entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entaccnts.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) AND entaccnts.account = entcdr.account AND entcdr.call_timestamp BETWEEN %s AND %s and entcdr.duration > 0 Group By entaccnts.account order by bad_count DESC LIMIT %s) t order by bad_count DESC, -mos_score DESC",

  "SQL_ENT_GET_ENTERPRISE_GRAPHING_PARENT": "(SELECT from_unixtime(floor(unix_timestamp(call_timestamp)/%s) * %s, '%%Y-%%m-%%dT%%TZ') AS unit_time, floor(unix_timestamp(call_timestamp)/%s) AS my_time, count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls,  AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count FROM ent_cdrs entcdr WHERE entcdr.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) AND entcdr.call_timestamp BETWEEN %s AND %s and entcdr.duration > 0 GROUP BY my_time ORDER BY unit_time ASC)",
  "SQL_ENT_GET_ENTERPRISE_GRAPHING_SUMMARY": "(SELECT from_unixtime(floor(unix_timestamp(call_timestamp)/%s) * %s, '%%Y-%%m-%%dT%%TZ') AS unit_time, floor(unix_timestamp(call_timestamp)/%s) AS my_time, count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls,  AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count FROM ent_cdrs entcdr WHERE entcdr.account = %s AND entcdr.call_timestamp BETWEEN %s AND %s and entcdr.duration > 0 GROUP BY my_time ORDER BY unit_time ASC)",

  "SQL_GET_TEL_ON_ACCOUNT_PARENT": "SELECT (SELECT COUNT(0) FROM ent_cdr_dids WHERE %s IN (account, parent_account)) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE %s IN (account, parent_account) LIMIT %s OFFSET %s",
  "SQL_GET_TEL_ON_ACCOUNT": "SELECT (SELECT COUNT(0) FROM ent_cdr_dids WHERE %s = account) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE %s = account LIMIT %s OFFSET %s",
  "SQL_GET_TOP_N_LOCATION_CDRS_TEL" : "select t.* from(SELECT (SELECT COUNT(Distinct from_number) FROM ent_cdrs WHERE %s = account AND call_timestamp BETWEEN %s AND %s and duration > 0) AS totalCount, from_number, COUNT(IF(mos_score IS NULL or mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(mos_score >= 3.5, mos_score, null)) AS good_count, COUNT(IF(mos_score >= 3.0 and mos_score < 3.5, mos_score, null)) AS moderate_count, COUNT(IF(mos_score < 3 AND mos_score > 0.1, mos_score, null)) AS bad_count, AVG(if(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0, entcdr.mos_score, NULL)) AS mos_score, count(*) as totalCalls FROM ent_cdrs entcdr WHERE %s = account AND call_timestamp BETWEEN %s AND %s and entcdr.duration > 0 GROUP BY from_number order by bad_count DESC LIMIT %s OFFSET %s) t order by bad_count DESC, -mos_score DESC",
  "SQL_GET_TEL_PATTERN_ON_ACCOUNT_PARENT": "SELECT (SELECT COUNT(Distinct did) FROM ent_cdr_dids WHERE %s IN (account, parent_account) and did LIKE CONCAT('%%', %s ,'%%')) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE %s IN (account, parent_account) and did LIKE CONCAT('%%', %s ,'%%') GROUP BY did LIMIT %s OFFSET %s",
  "SQL_GET_TEL_PATTERN_ON_ACCOUNT": "SELECT (SELECT COUNT(Distinct did) FROM ent_cdr_dids WHERE %s = account and did LIKE CONCAT('%%', %s ,'%%')) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE %s = account and did LIKE CONCAT('%%', %s ,'%%') GROUP BY did LIMIT %s OFFSET %s",
  "SQL_GET_TOP_N_LOCATION_CDRS_TEL_SUMMARY" : "SELECT COUNT(IF(mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(mos_score IS NULL or mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(mos_score >= 3.5, mos_score, null)) AS good_count, COUNT(IF(mos_score >= 3.0 and mos_score < 3.5, mos_score, null)) AS moderate_count, COUNT(IF(mos_score < 3 AND mos_score > 0.1, mos_score, null)) AS bad_count, AVG(if(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0, entcdr.mos_score, NULL)) AS mos_score, count(*) as totalCalls FROM ent_cdrs entcdr WHERE %s = account AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s and entcdr.duration > 0",
  "SQL_GET_DATE" : "SELECT CURDATE()",
  "SQL_GET_MAX_ID" : "select max(id) from ent_cdrs",


  "SQL_GET_CALLRECORDS_UG_FRAGMENT" : "WHERE broadsoft_user_id in (%s) AND broadsoft_group = %s ",
  "SQL_GET_CALLRECORDS_US_FRAGMENT" : "WHERE broadsoft_user_id in (%s) AND broadsoft_enterprise = %s ",
  "SQL_GET_CALLRECORDS_U_FRAGMENT" : "WHERE broadsoft_user_id in (%s) ",
  "SQL_GET_CALLRECORDS_BSE" : " AND broadsoft_enterprise = %s ",
  "SQL_GET_CALLRECORDS_BSG" : " AND broadsoft_group = %s ",
  "SQL_GET_CALLRECORDS_BSG_FIRST" : " WHERE broadsoft_group = %s ",
  "SQL_GET_CALLRECORDS_BSU" : "WHERE broadsoft_user_id in ",
  "SQL_GET_CALLRECORDS_GS_FRAGMENT" : "WHERE broadsoft_group = %s AND broadsoft_enterprise = %s ",
  "SQL_GET_CALLRECORDS_G_FRAGMENT" : "WHERE broadsoft_group = %s ",
  "SQL_GET_CALLRECORDS_S_FRAGMENT" : "WHERE broadsoft_enterprise = %s ",
  "SQL_GET_CALLRECORDS_Direction_received_FRAGMENT" : "AND direction = 'INBOUND' AND answer_indicator in ('Yes-PostRe', 'Yes') ",
  "SQL_GET_CALLRECORDS_Direction_placed_FRAGMENT" : "AND direction = 'OUTBOUND' AND answer_indicator in ('Yes-PostRe', 'Yes') ",
  "SQL_GET_CALLRECORDS_Direction_missed_FRAGMENT" : "AND direction = 'INBOUND' AND answer_indicator ='No' ",
  "SQL_GET_CALLRECORDS_Direction_attempted_FRAGMENT" : "AND direction = 'OUTBOUND' AND answer_indicator ='No' ",
  "SQL_GET_CALLRECORDS_Direction_all_FRAGMENT" : " ",
  "SQL_GET_CALLRECORDS_Mode_internal_FRAGMENT" : "AND bsft_call_type in ('Group', 'Network', 'Internal', 'Repair', 'Error') ",
  "SQL_GET_CALLRECORDS_Mode_external_FRAGMENT" : "AND bsft_call_type in ('Network URL', 'Emergency') ",
  "SQL_GET_CALLRECORDS_Duration_POS_FRAGMENT" : "AND duration > 0 ",
  "SQL_GET_CALLRECORDS_Duration_0_FRAGMENT" : "AND duration = 0 ",
  "SQL_GET_CALLRECORDS_HEAD_FRAGMENT" : "AND part_type = 'HEAD' ",
  "SQL_GET_CALLRECORDS_HEAD_LEGS_FRAGMENT" : "",
  "SQL_GET_CALL_RECORDS_FRAGMENT_SELECT" : "SELECT ( select count(0) FROM ent_cdrs ",
  "SQL_GET_CALL_RECORDS_FRAGMENT_TIMESTAMP" : "AND call_timestamp BETWEEN %s AND %s ",
  "SQL_GET_CALL_RECORDS_FRAGMENT_MIDDLE" : ") as totalCount, nullif(conversation_id, 'VOID') as conversation_id, nullif(part_type, 'VOID') as part_type, from_number, to_number, direction, answer_indicator, bsft_call_type, duration, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time FROM ent_cdrs ",
  "SQL_GET_CALL_RECORDS_FRAGMENT_ORDERBY" : "ORDER BY call_timestamp DESC LIMIT %s OFFSET %s",
  "SQL_GET_CALL_RECORDS_SUMMARY_FRAGMENT_MIDDLE" : ") as totalCount, COUNT(IF(direction ='INBOUND' AND answer_indicator in ('Yes-PostRe', 'Yes') , 1, null)) AS inbound, COUNT(IF(direction ='OUTBOUND' AND answer_indicator in ('Yes-PostRe', 'Yes'), 1, null)) AS outbound, COUNT(IF(direction ='INBOUND' AND answer_indicator ='No', 1, null)) AS missed, COUNT(IF(direction ='OUTBOUND' AND answer_indicator ='No', 1, null)) AS attempted FROM ent_cdrs ",
  "SQL_GET_CALL_RECORDS_LEGS" : "SELECT ( select count(0) FROM ent_cdrs WHERE conversation_id = %s AND part_type = 'LEG') as totalCount, from_number, to_number, direction, answer_indicator, bsft_call_type, duration, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time FROM ent_cdrs WHERE conversation_id = %s AND part_type = 'LEG' ORDER BY call_timestamp DESC, duration DESC LIMIT %s OFFSET %s",

  "SQL_(" : " ( ",
  "SQL_)" : " ) ",
  "SQL_AND" : " AND ",
  "SQL_OR" : " OR ",
  "SQL_ASC" : " ASC ",
  "SQL_DESC" : " DESC ",
  "SQL_ORDERBY" : " ORDER BY ",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY" : "SELECT ( select count(0) FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s ) as totalCount, from_number, to_number, direction, duration, answer_indicator, bsft_call_type, conversation_id, dialed_digits, codec, device, part_type, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter, device FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s ORDER BY call_timestamp DESC LIMIT %s OFFSET %s",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_SELECT" : "SELECT ( select count(0) FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s ",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_MIDDLE" : " ) as totalCount, id, relation_id, from_number, to_number, direction, duration, answer_indicator, bsft_call_type, nullif(conversation_id, 'VOID') as conversation_id, dialed_digits, codec, device, nullif(part_type, 'VOID') as part_type, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter FROM ent_cdrs WHERE account = %s AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s AND (conversation_id != 'VOID' OR part_type != 'VOID')",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_CT" : "call_timestamp",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_DUR" : "duration",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_PL" : "packet_loss",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_JIT" : "jitter",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_MOS" : "mos_score",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_FRAGMENT_DIR" : "direction",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_POOR" : " mos_score < 3 AND mos_score > 0.1 ",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_MODERATE" : " mos_score >= 3.0 and mos_score < 3.5 ",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_GOOD" : " mos_score >= 3.5 ",
  "SQL_LOCATION_DID_CDRS_CALL_QUALITY_LIMIT_OFFSET" : " LIMIT %s OFFSET %s ",

  "SQL_GET_TOP_N_LOCATION_CDRS_TEL_SUMMARY_CALL_QUALITY" : "SELECT COUNT(IF(mos_score > 0, mos_score, null)) AS totalRatedCalls, COUNT(IF(mos_score IS NULL or mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(mos_score >= 3.5 AND answer_indicator = 'Yes', mos_score, null)) AS good_count, COUNT(IF(mos_score >= 3.0 AND mos_score < 3.5 AND answer_indicator = 'Yes', mos_score, null)) AS moderate_count, COUNT(IF(mos_score < 3 AND mos_score > 0.1 AND answer_indicator = 'Yes', mos_score, null)) AS bad_count, AVG(if(mos_score IS NOT NULL AND mos_score > 0 AND answer_indicator = 'Yes', mos_score, NULL)) AS mos_score, count(*) as totalCalls FROM ent_cdrs entcdr WHERE %s = account AND %s in ( from_number ) AND call_timestamp BETWEEN %s AND %s ",
  "SQL_GET_TOP_N_LOCATION_CDRS_TEL_CALL_QUALITY" : "select t.* from(SELECT (SELECT COUNT(Distinct from_number) FROM ent_cdrs WHERE %s = account AND call_timestamp BETWEEN %s AND %s) AS totalCount, COUNT(IF(mos_score > 0, mos_score, null)) AS totalRatedCalls, from_number, COUNT(IF(mos_score IS NULL or mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(mos_score >= 3.5 AND answer_indicator = 'Yes', mos_score, null)) AS good_count, COUNT(IF(mos_score >= 3.0 and mos_score < 3.5 AND answer_indicator = 'Yes', mos_score, null)) AS moderate_count, COUNT(IF(mos_score < 3 AND mos_score > 0.1 AND answer_indicator = 'Yes', mos_score, null)) AS bad_count, AVG(if(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0 AND answer_indicator = 'Yes', entcdr.mos_score, NULL)) AS mos_score, count(*) as totalCalls FROM ent_cdrs entcdr WHERE %s = account AND call_timestamp BETWEEN %s AND %s GROUP BY from_number order by bad_count DESC LIMIT %s OFFSET %s) t order by bad_count DESC, -mos_score DESC",

  "SQL_GET_HEAD_LEGS_CALL_QUALITY_SELECT" : "SELECT ( select count(0) FROM ent_cdrs WHERE conversation_id = %s AND parent_account = %s",
  "SQL_GET_HEAD_LEGS_CALL_QUALITY_FRAGMENT_MIDDLE" : " ) as totalCount, from_number, to_number, direction, duration, answer_indicator, bsft_call_type, nullif(conversation_id, 'VOID') as conversation_id, dialed_digits, codec, device, nullif(part_type, 'VOID') as part_type, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time, mos_score, ROUND(packet_loss,2) as packet_loss, ROUND(jitter,2) as jitter FROM ent_cdrs WHERE conversation_id = %s AND parent_account = %s",

  "SQL_ENT_GET_ENTERPRISE_SUMMARY_PARENT_CALL_QUALITY" : "(SELECT 'bad', count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(if(mos_score IS NOT NULL AND mos_score > 0, mos_score, NULL)) AS mos_score, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, 'moderate', AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, 'good', AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account,  entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entcdr.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) and  entcdr.account = entaccnts.account AND entcdr.call_timestamp BETWEEN %s AND %s AND part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes')",
  "SQL_ENT_GET_ENTERPRISE_SUMMARY_PARENT_CALL_QUALITY_CONDENSED" : "(SELECT 'bad', count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(if(mos_score IS NOT NULL AND mos_score > 0, mos_score, NULL)) AS mos_score, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, 'moderate', AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, 'good', AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account,  entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entcdr.parent_account = %s and  entcdr.account = entaccnts.account AND entcdr.call_timestamp BETWEEN %s AND %s AND part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes')",

  "SQL_ENT_GET_ENTERPRISE_SUMMARY_CALL_QUALITY" :        "(SELECT 'bad', count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', entcdr.direction, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', entcdr.direction, null)) AS outbound, AVG(if(mos_score IS NOT NULL AND mos_score > 0, mos_score, NULL)) AS mos_score, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, 'moderate', AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, 'good', AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account, entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entcdr.account = %s and entcdr.account = entaccnts.account AND entcdr.call_timestamp BETWEEN %s AND %s AND part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes')",

  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY": "select t.* from (SELECT AVG(IF(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0, entcdr.mos_score, NULL)) AS mos_score, COUNT(IF(entcdr.mos_score IS NULL, 1, 1)) AS totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account, entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entaccnts.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) AND entaccnts.account = entcdr.account AND entcdr.call_timestamp BETWEEN %s AND %s AND part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes' Group By entaccnts.account order by bad_count DESC LIMIT %s) t order by bad_count DESC, -mos_score DESC",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_SELECT": "select t.* from (SELECT AVG(IF(entcdr.mos_score IS NOT NULL and entcdr.mos_score > 0, entcdr.mos_score, NULL)) AS mos_score, COUNT(IF(entcdr.mos_score IS NULL, 1, 1)) AS totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls, COUNT(IF(entcdr.mos_score IS NULL or entcdr.mos_score = 0, 1, null)) AS not_scored_count, COUNT(IF(entcdr.direction ='INBOUND', 1, null)) AS inbound, COUNT(IF(entcdr.direction ='OUTBOUND', 1, null)) AS outbound, AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count, entaccnts.account, entaccnts.account_name FROM ent_cdrs entcdr, ent_accounts entaccnts WHERE entaccnts.parent_account = %s AND entaccnts.account = entcdr.account AND entcdr.call_timestamp BETWEEN %s AND %s AND part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes' Group By entaccnts.account ",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_TOTAL_CALLS": "totalCalls",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_GOOD_CALLS": "good_count",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_MODERATE_CALLS": "moderate_count",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_POOR_CALLS": "bad_count",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_MOS": "mos_score",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_LIMIT": " LIMIT %s) t ",
  "SQL_GET_TOP_N_PROBLEM_BY_ACCOUNT_CALL_QUALITY_FRAGMENT_MOS_DESC": " , -mos_score DESC ",

  "SQL_ENT_GET_ENTERPRISE_GRAPHING_PARENT_CALL_QUALITY": "(SELECT from_unixtime(floor(unix_timestamp(call_timestamp)/%s) * %s, '%%Y-%%m-%%dT%%TZ') AS unit_time, floor(unix_timestamp(call_timestamp)/%s) AS my_time, count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls,  AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count FROM ent_cdrs entcdr WHERE entcdr.parent_account = (SELECT IFNULL(parent_account, account) FROM ent_accounts WHERE account = %s) AND entcdr.call_timestamp BETWEEN %s AND %s AND entcdr.part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes' GROUP BY my_time ORDER BY unit_time ASC)",
  "SQL_ENT_GET_ENTERPRISE_GRAPHING_SUMMARY_CALL_QUALITY": "(SELECT from_unixtime(floor(unix_timestamp(call_timestamp)/%s) * %s, '%%Y-%%m-%%dT%%TZ') AS unit_time, floor(unix_timestamp(call_timestamp)/%s) AS my_time, count(*) as totalCalls, COUNT(IF(entcdr.mos_score > 0, entcdr.mos_score, null)) AS totalRatedCalls,  AVG(IF(entcdr.mos_score < 3 AND entcdr.mos_score > 0.1, entcdr.mos_score, NULL)) AS mos_bad_count, COUNT(IF(entcdr.mos_score < 3 AND mos_score > 0.1, entcdr.mos_score, null)) AS bad_count, AVG(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, NULL)) AS mos_moderate_count, COUNT(IF(entcdr.mos_score >= 3.0 and entcdr.mos_score < 3.5, entcdr.mos_score, null)) AS moderate_count, AVG(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, NULL)) AS mos_good_count, COUNT(IF(entcdr.mos_score >= 3.5, entcdr.mos_score, null)) AS good_count FROM ent_cdrs entcdr WHERE entcdr.account = %s AND entcdr.call_timestamp BETWEEN %s AND %s  AND entcdr.part_type = 'HEAD' AND entcdr.answer_indicator = 'Yes' GROUP BY my_time ORDER BY unit_time ASC)",

  "SQL_ENT_GET_PARENT_ACCOUNT" : "SELECT IFNULL(parent_account, account) as parent_account FROM ent_accounts WHERE account = %s",
  "SQL_GET_TEL_PATTERN_ON_ACCOUNT_PARENT_CALL_QUALITY": "SELECT (SELECT COUNT(Distinct did) FROM ent_cdr_dids WHERE (account in (%s) or parent_account in (%s)) and did LIKE CONCAT('%%', %s ,'%%')) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE (account in (%s) or parent_account in (%s)) and did LIKE CONCAT('%%', %s ,'%%') GROUP BY did LIMIT %s OFFSET %s",
  "SQL_GET_TEL_PATTERN_ON_ACCOUNT_CALL_QUALITY": "SELECT (SELECT COUNT(Distinct did) FROM ent_cdr_dids WHERE %s = account and did LIKE CONCAT('%%', %s ,'%%')) AS totalCount,  id, account, parent_account, did FROM ent_cdr_dids WHERE %s = account and did LIKE CONCAT('%%', %s ,'%%') GROUP BY did LIMIT %s OFFSET %s",

  "SQL_GET_CALL_RECORDS_AUTH_CODE" : "SELECT ( select count(0) FROM ent_auth_code WHERE local_call_id = %s AND ext_tracking_id = %s AND broadsoft_user_id = %s) as totalCount, authorization_code, local_call_id, broadsoft_enterprise, answer_indicator, bsft_call_type, duration, ext_tracking_id, broadsoft_group, broadsoft_user_id, DATE_FORMAT(call_timestamp, '%%Y-%%m-%%dT%%TZ') as call_timestamp, DATE_FORMAT(answer_time, '%%Y-%%m-%%dT%%TZ') as answer_time, DATE_FORMAT(release_time, '%%Y-%%m-%%dT%%TZ') as release_time FROM ent_auth_code WHERE local_call_id = %s AND ext_tracking_id = %s AND broadsoft_user_id = %s ORDER BY call_timestamp DESC, duration DESC LIMIT %s OFFSET %s"




}